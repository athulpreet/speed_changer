#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#define BAUDRATE 9600
#define F_CPU 16000000UL

volatile int value = 20;  // Starting value

void uart_init() {
    UBRR0H = (uint8_t)(F_CPU/16/BAUDRATE-1)>>8;
    UBRR0L = (uint8_t)(F_CPU/16/BAUDRATE-1);
    UCSR0B = (1<<TXEN0);  // Enable transmitter
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8-bit data
}

void uart_transmit(unsigned char data) {
    while (!(UCSR0A & (1<<UDRE0))); // Wait until buffer is empty
    UDR0 = data;
}

void setup_button_input() {
    DDRB &= ~((1 << DDB0) | (1 << DDB1)); // Set PB0 and PB1 as inputs
    PORTB |= (1 << PORTB0) | (1 << PORTB1); // Enable pull-up resistors on PB0 and PB1
    PCICR |= (1 << PCIE0); // Enable Pin Change Interrupt for PCINT0-PCINT7
    PCMSK0 |= (1 << PCINT0) | (1 << PCINT1); // Enable PCINT0 and PCINT1 interrupts
    sei(); // Enable global interrupts
}

void setup_timer_interrupt() {
    TCCR1B |= (1 << WGM12); // Configure Timer1 in CTC Mode
    OCR1A = 15624; // Set CTC compare value for 1Hz at 16MHz AVR clock with a prescaler of 1024
    TCCR1B |= (1 << CS12) | (1 << CS10); // Start Timer1 with prescaler of 1024
    TIMSK1 |= (1 << OCIE1A); // Enable Timer1 compare interrupt
}

ISR(PCINT0_vect) {
    _delay_ms(50); // Debouncing delay
    if (!(PINB & (1 << PINB0))) {  // If PB0 is pressed
        if (value < 120) value += 10;
    }
    if (!(PINB & (1 << PINB1))) {  // If PB1 is pressed
        if (value > 20) value -= 10;
    }
}

ISR(TIMER1_COMPA_vect) {
    uart_transmit(value); // Sends the byte with decimal value 20
}






int main(void) {
    uart_init();
    setup_button_input();
    setup_timer_interrupt();

    while (1) {
        // Main loop. Everything is handled by interrupts.
    }
}
